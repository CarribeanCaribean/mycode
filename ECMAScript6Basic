读《ECMAScript 6 入门》（阮一峰）学习笔记
一、ECMAScript 6简介
1、Babel转码器
  --配置文件.babelrc。
  --命令行转码babel-cli，Babel提供babel-cli工具，用于命令行转码。
        babel-node，babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。
  --babel-register，babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。
  --babel-core，如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块。
  --babel-polyfill，转换JavaScript新的API。
  --Babel提供一个REPL在线编译器，可以在线将ES6代码转为ES5代码。转换后的代码，可以直接作为ES5代码插入网页运行。https://babeljs.io/repl/
2、Traceur转码器
  --Google公司的Traceur转码器，也可以将ES6代码转为ES5代码。
  --Traceur允许将ES6代码直接插入网页。
  --Traceur也提供一个在线编译器，可以在线将ES6代码转为ES5代码。转换后的代码，可以直接作为ES5代码插入网页运行。http://google.github.io/traceur-compiler/demo/repl.html#
二、let和const命令
1、let命令
  --let命令，用来声明变量，所声明的变量只在let命令所在的代码块内有效。
  --不存在变量提升（var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。），let命令它所声明的变量一定要在声明后使用，否则报错ReferenceError。
  --暂时性死区（temporal dead zone，简称 TDZ），只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。（ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。）
  --不允许重复声明，let不允许在相同作用域内，重复声明同一个变量。
2、块级作用域
  --ES5 只有全局作用域和函数作用域，没有块级作用域。（缺点：内层变量可能会覆盖外层变量。用来计数的循环变量泄露为全局变量。）
  --ES6 的块级作用域，(1)ES6 允许块级作用域的任意嵌套。(2)内层作用域可以定义外层作用域的同名变量。(3)块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。
  --（1）允许在块级作用域内声明函数。（2）函数声明类似于var，即会提升到全局作用域或函数作用域的头部。（3）同时，函数声明还会提升到所在的块级作用域的头部。上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。
  --（考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式let f = function () {}，而不是函数声明语句function f() {}。）
  --ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。
  --块级作用域是一个语句，将多个操作封装在一起，没有返回值。在块级作用域之前加上do，使它变为do表达式，可以返回值。
3、const 命令
  --const声明一个只读的常量。一旦声明，常量的值就不能改变。（const一旦声明变量，就必须立即初始化，不能留到以后赋值。改变常量的值会报错。）
  --const的作用域与let命令相同：只在声明所在的块级作用域内有效。
  --const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。
  --const声明的常量，也与let一样不可重复声明。
  --将一个对象或者数组声明为常量，可以为对象或者数组改变其属性，但是不能使该常量指向另外的对象或者数组。（对象本身是可变的，所以依然可以为其添加新属性。这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。）
  --Object.freeze（），const foo = Object.freeze({});常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。
    将对象彻底冻结的函数：
    var constantize = (obj) => {
      Object.freeze(obj);
      Object.keys(obj).forEach( (key, i) => {
        if ( typeof obj[key] === 'object' ) {
          constantize( obj[key] );
        }
      });
    };
  --ES5 只有两种声明变量的方法：var命令和function命令。ES6一共有6种声明变量的方法：var命令，function命令，let命令，const命令，import命令，class命令。
4、顶层对象的属性
  --顶层对象。在浏览器环境指的是window对象；在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的。
  （顶层对象的属性与全局变量挂钩的缺点：
      （1）没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）。
      （2）程序员很容易不知不觉地就创建了全局变量（比如打字出错）。
      （3）顶层对象的属性是到处可以读写的，这非常不利于模块化编程。
      （4）window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。）
  --ES6规定var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
5、global 对象
  --都取到顶层对象。下面是两种勉强可以使用的方法。
        // 方法一
        (typeof window !== 'undefined'
           ? window
           : (typeof process === 'object' &&
              typeof require === 'function' &&
              typeof global === 'object')
             ? global
             : this);

        // 方法二
        var getGlobal = function () {
          if (typeof self !== 'undefined') { return self; }
          if (typeof window !== 'undefined') { return window; }
          if (typeof global !== 'undefined') { return global; }
          throw new Error('unable to locate global object');
        };
三、变量的解构赋值
1、解构:ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值。let [a, b, c] = [1, 2, 3]。
  --解构不成功：let [bar, foo] = [1];
  --不完全解构：let [a, [b], d] = [1, [2, 3], 4];
  --解构赋值允许指定默认值：let [x, y = 'b'] = ['a']; // x='a', y='b'。
2、对象的解构赋值
  --数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。let { bar, foo } = { foo: "aaa", bar: "bbb" }。let {foo} = {foo: 1}; 或者 let foo;({foo} = {foo: 1})。（let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。）
3、字符串的解构赋值 
  --const [a, b, c, d, e] = 'hello';
4、数值和布尔值的解构赋值
  --解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
5、函数参数的解构赋值
6、圆括号问题
  --不能使用圆括号的情况：（1）变量声明语句中，不能带有圆括号。（2）函数参数中，模式不能带有圆括号。（3）赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中。
  --可以使用圆括号的情况：赋值语句的非模式部分，可以使用圆括号。
7、用途
  --变量的解构赋值用途很多。（1）交换变量的值；（2）从函数返回多个值；（3）函数参数的定义；（4）提取JSON数据；（5）函数参数的默认值；（6）遍历Map结构（任何部署了Iterator接口的对象，都可以用for...of循环遍历）for (let [key, value] of map) {console.log(key + " is " + value);}；（7）输入模块的指定方法。
四、字符串的扩展
1、字符的Unicode表示法
  --JavaScript允许采用\uxxxx形式表示一个字符，其中“xxxx”表示字符的码点"\u0061"，这种表示法只限于\u0000——\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表达"\uD842\uDFB7"。
  --ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。如："\u{20BB7}"，'\u{1F680}' === '\uD83D\uDE80'。
  --JavaScript共有6种方法可以表示一个字符。
      '\z' === 'z'  // true
      '\172' === 'z' // true
      '\x7A' === 'z' // true
      '\u007A' === 'z' // true
      '\u{7A}' === 'z' // true
2、codePointAt()
  --ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。
  --codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。s.codePointAt(0).toString(16) // "20bb7"
3、String.fromCodePoint()
  --ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别32位的UTF-16字符（Unicode编号大于0xFFFF）。ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。
4、字符串的遍历器接口
  --ES6为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历。
        for (let codePoint of 'foo') {
          console.log(codePoint)
        }
        // "f"
        // "o"
        // "o"
  --除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。
        var text = String.fromCodePoint(0x20BB7);
        for (let i of text) {
          console.log(i);
        }
        // "𠮷"
5、at()
  --ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。提出字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。
    '𠮷'.charAt(0) // "\uD842"
    '𠮷'.at(0) // "𠮷"
6、normalize()
  --normalize方法可以接受一个参数来指定normalize的方式，参数的四个可选值：NFC，默认参数，表示“标准等价合成”；NFD，表示“标准等价分解”；NFKC，表示“兼容等价合成”；NFKD，表示“兼容等价分解”。
7、includes(), startsWith(), endsWith()
  --这三个方法都支持第二个参数，表示开始搜索的位置。使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。
  --includes()：返回布尔值，表示是否找到了参数字符串。
  --startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
  --endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。
8、repeat() 
  --repeat方法返回一个新字符串，表示将原字符串重复n次。参数如果是小数，会被取整。如果repeat的参数是负数或者Infinity，会报错。如果参数是0到-1之间的小数，则等同于0。参数NaN等同于0。
9、padStart()，padEnd()
  --ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。
      'x'.padStart(4, 'ab') // 'abax'；
      'x'.padEnd(4, 'ab') // 'xaba'；
  --如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。
  --如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。
  --如果省略第二个参数，默认使用空格补全长度。
  --padStart的常见用途是为数值补全指定位数，'1'.padStart(10, '0') // "0000000001"。另一个用途是提示字符串格式，'12'.padStart(10, 'YYYY-MM-DD') // "YYYY-MM-12"。
10、模板字符串
  --模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。
  --如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。如果你不想要这个换行，可以使用trim方法消除它。
  --模板字符串中嵌入变量，需要将变量名写在${}之中。大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。
          // 普通字符串
          `In JavaScript '\n' is a line-feed.`

          // 多行字符串
          `In JavaScript this is
           not legal.`

          console.log(`string text line 1
          string text line 2`);

          // 字符串中嵌入变量
          var name = "Bob", time = "today";
          `Hello ${name}, how are you ${time}?`
11、标签模板
  --模板字符串，它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。
  --标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。
12、String.raw()
13、模板字符串的限制
  --前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，因此导致了无法嵌入其他语言。
  --为了解决这个问题，现在有一个提案，放松对标签模板里面的字符串转义的限制。模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了。
  --注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。
五、正则的扩展
1、RegExp构造函数
  --第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。
  --第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。但是，ES5不允许此时使用第二个参数，添加修饰符，否则会报错。
  --ES6改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。
2、字符串的正则方法
  --字符串对象共有4个方法，可以使用正则表达式：match()、replace()、search()和split()。
  --ES6将这4个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。
      String.prototype.match 调用 RegExp.prototype[Symbol.match]
      String.prototype.replace 调用 RegExp.prototype[Symbol.replace]
      String.prototype.search 调用 RegExp.prototype[Symbol.search]
      String.prototype.split 调用 RegExp.prototype[Symbol.split]
3、u修饰符
  --ES6对正则表达式添加了u修饰符，含义为“Unicode模式”，用来正确处理大于\uFFFF的Unicode字符。/^\uD83D/u.test('\uD83D\uDC2A')；
  --一旦加上u修饰符号，就会修改下面这些正则表达式的行为。
      --（1）点字符:点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的Unicode字符，点字符不能识别，必须加上u修饰               符。
            var s = '𠮷';/^.$/u.test(s) // true
      --（2）Unicode字符表示法:ES6新增了使用大括号表示Unicode字符，这种表示法在正则表达式中必须加上u修饰符，才能识别。
            /\u{20BB7}/u.test('𠮷') // true
      --（3）量词：使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的Unicode字符。
            /𠮷{2}/u.test('𠮷𠮷') // true
      --（4）预定义模式：\S是预定义模式，匹配所有不是空格的字符。只有加了u修饰符，它才能正确匹配码点大于0xFFFF的Unicode字符。
      --（5）i修饰符:有些Unicode字符的编码不同，但是字型很相近，比如，\u004B与\u212A都是大写的K，不加u修饰符，就无法识别非规范的K字符。
4、y 修饰符 (“粘连”（sticky）修饰符。)
  --y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。
  --lastIndex属性指定每次搜索的开始位置,y修饰符同样遵守lastIndex属性，但是要求必须在lastIndex指定的位置发现匹配。
  --y修饰符号隐含了头部匹配的标志^。
  --单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。
  --
5、sticky属性
  --sticky属性表示是否设置了y修饰符。var r = /hello\d/y;r.sticky // true
6、flags属性
  --flags属性，会返回正则表达式的修饰符。
7、RegExp.escape() 
  --字符串必须转义，才能作为正则模式。字符串转义以后，可以使用RegExp构造函数生成正则模式。目前，该方法可以用escapeRegExp函数或者垫片模块regexp.escape实现。
8、s 修饰符：dotAll 模式
  --以下四个字符属于“行终止符”
      U+000A 换行符（\n）
      U+000D 回车符（\r）
      U+2028 行分隔符（line separator）
      U+2029 段分隔符（paragraph separator）
  --现在有一个提案，引入/s修饰符，使得.可以匹配任意单个字符。这被称为dotAll模式，即点（dot）代表一切字符。
  --正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。
9、后行断言
10、Unicode属性类
  --引入了一种新的类的写法\p{...}和\P{...}，允许正则表达式匹配符合Unicode某种属性的所有字符。
  --\P{…}是\p{…}的反向匹配，即匹配不满足条件的字符
  --注意，这两种类只对Unicode有效，所以使用的时候一定要加上u修饰符。如果不加u修饰符，正则表达式使用\p和\P会报错，ECMAScript预留了这两个类。
六、数值的扩展
1、二进制和八进制表示法
  --ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。
  --如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。
2、Number.isFinite(), Number.isNaN() 
  --Number.isFinite()用来检查一个数值是否为有限的（finite）。
  --Number.isNaN()用来检查一个值是否为NaN。
3、Number.parseInt(), Number.parseFloat()
  --// ES5的写法
    parseInt('12.34') // 12
    parseFloat('123.45#') // 123.45

    // ES6的写法
    Number.parseInt('12.34') // 12
    Number.parseFloat('123.45#') // 123.45
  --这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。
4、Number.isInteger()
  --Number.isInteger()用来判断一个值是否为整数
5、Number.EPSILON
  --ES6在Number对象上面，新增一个极小的常量Number.EPSILON。如果误差能够小于Number.EPSILON，我们就可以认为得到了正确结果。因此，Number.EPSILON的实质是一个可以接受的误差范围。
6、安全整数和Number.isSafeInteger()
  --JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。ES6引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。
  --Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。
7、Math对象的扩展
  (1)Math.trunc() ：用于去除一个数的小数部分，返回整数部分。
  (2)Math.sign() ：用来判断一个数到底是正数、负数、还是零。参数为正数，返回+1；参数为负数，返回-1；参数为0，返回0；参数为-0，返回-0;其他值，返回NaN。
  (3)Math.cbrt()：用于计算一个数的立方根
  (4)Math.clz32()：返回一个数的32位无符号整数形式有多少个前导0。
  (5)Math.imul() ：返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。（因为JavaScript有精度限制，超过2的53次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，Math.imul方法可以返回正确的低位数值。）
  (6)Math.fround():返回一个数的单精度浮点数形式。
  (7)Math.hypot():返回所有参数的平方和的平方根。(如果参数不是数值，Math.hypot方法会将其转为数值。只要有一个参数无法转为数值，就会返回NaN。)
  --对数方法
  (8)Math.expm1():返回ex - 1，即Math.exp(x) - 1。
  (9)Math.log1p():方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。
  (10)Math.log10():返回以10为底的x的对数。如果x小于0，则返回NaN。
  (11)Math.log2():返回以2为底的x的对数。如果x小于0，则返回NaN。
  --三角函数方法
  (12)Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）
      Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）
      Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）
      Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）
      Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）
      Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）
8、Math.signbit()
  --用来判断一个值的正负，但是如果参数是-0，它会返回-0。
9、指数运算符
  --ES2016 新增了一个指数运算符（**）。
  --指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。b **= 3;// 等同于 b = b * b * b;
七、数组的扩展
1、Array.from()
  --Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。
  --实际应用中，常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。
  --只要是部署了Iterator接口的数据结构，Array.from都能将其转为数组。
  --扩展运算符（...）也可以将某些数据结构转为数组。扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。
  --对于还没有部署Array.from的浏览器，可以用Array.prototype.slice方法替代。
    const toArray = (() =>
      Array.from ? Array.from : obj => [].slice.call(obj)
    )();
  --Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。
    Array.from(arrayLike, x => x * x);
    // 等同于
    Array.from(arrayLike).map(x => x * x);
  --Array.from()可以将各种值转为真正的数组，并且还提供map功能。
  --Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种Unicode字符，可以避免JavaScript将大于\uFFFF的Unicode字符，算作两个字符的bug。
2、Array.of()
  --Array.of方法用于将一组值，转换为数组。
  --这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。Array方法只有当参数个数不少于2个时，Array()才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。
3、数组实例的copyWithin()
  --数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。
      Array.prototype.copyWithin(target, start = 0, end = this.length)；
      (target（必需）：从该位置开始替换数据。
      start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。
      end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。)
   例子：[1, 2, 3, 4, 5].copyWithin(0, 3)// [4, 5, 3, 4, 5]
4、数组实例的find()和findIndex()
  --数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
  --数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。
5、数组实例的fill()
  --fill方法使用给定值，填充一个数组。
  --fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。['a', 'b', 'c'].fill(7, 1, 2)// ['a', 7, 'c']（上面代码表示，fill方法从1号位开始，向原数组填充7，到2号位之前结束）
6、数组实例的entries()，keys()和values()
  --keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。
7、数组实例的includes()
  --Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。该方法属于ES7，但Babel转码器已经支持。
  --该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
  --Map和Set数据结构有一个has方法，需要注意与includes区分。
      Map结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。
      Set结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)。
8、数组的空位
  --ES6则是明确将空位转为undefined。
八、函数的扩展
1、函数参数的默认值
  --在ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。function log(x, y ='World') {console.log(x, y);}
  --除了简洁，ES6 的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。
  --参数变量是默认声明的，所以不能用let或const再次声明。
  --与解构赋值默认值结合使用，只有当函数foo的参数是一个对象时，变量x和y才会通过解构赋值而生成。
2、
3、
4、
5、
6、
7、
8、
9、
